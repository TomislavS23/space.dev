/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package dev.space.view.panel;

import dev.space.dto.CategoryDTO;
import dev.space.factory.MapperFactory;
import dev.space.model.Category;
import dev.space.model.CategoryTableModel;
import dev.space.query.operation.CategoryOperations;
import dev.space.session.HibernateSessionFactory;
import dev.space.session.Operations;
import dev.space.utilities.MessageUtils;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.text.JTextComponent;
import org.modelmapper.ModelMapper;

/**
 *
 * @author tomislav
 */
public class ManageCategoriesPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageCategoriesPanel
     */
    public ManageCategoriesPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbCategories = new javax.swing.JTable();
        lbCategoryType = new javax.swing.JLabel();
        tfCategoryType = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lbCategoryTypeError = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(1280, 689));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tbCategories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbCategories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbCategoriesMouseClicked(evt);
            }
        });
        tbCategories.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbCategoriesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbCategories);

        lbCategoryType.setText("Category Type:");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Edit");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lbCategoryTypeError.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        lbCategoryTypeError.setForeground(new java.awt.Color(255, 0, 0));
        lbCategoryTypeError.setText("X");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfCategoryType, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbCategoryTypeError))
                    .addComponent(lbCategoryType, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(lbCategoryType, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfCategoryType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbCategoryTypeError))
                .addGap(83, 83, 83)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        initialize();
    }//GEN-LAST:event_formComponentShown

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (!formValid()) {
            return;
        }

        try {
            CategoryDTO category = new CategoryDTO(tfCategoryType.getText().trim());

            categorySession.InsertEntity(mapper.map(category, Category.class));

            refreshTable();
            clearForm();
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", ex.getMessage());
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (selectedCategory == null) {
            MessageUtils.showInformationMessage("Incorrect operations", "You must select category before deleting");
            return;
        }

        if (!formValid()) {
            return;
        }

        try {
            CategoryDTO category = new CategoryDTO(
                    selectedCategory.getIdCategory(),
                    tfCategoryType.getText().trim());

            Category map = mapper.map(category, Category.class);

            categorySession.UpdateEntity(map);

            refreshTable();
            clearForm();
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", ex.getMessage());
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (selectedCategory == null) {
            MessageUtils.showInformationMessage("Incorrect operations", "You must select category before deleting");
            return;
        }

        if (MessageUtils.showConfirmDialog(
                "Delete article",
                "Do you really want to delete article?")) {
            try {
                categorySession.DeleteEntity(selectedCategory.getIdCategory());

                categoryTableModel.setCategories(categorySession.ReadAllEntities().get());

                clearForm();
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("Error", ex.getMessage());
            }

        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tbCategoriesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbCategoriesKeyReleased
         try {
            showCategory();
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", ex.getMessage());
        }
    }//GEN-LAST:event_tbCategoriesKeyReleased

    private void tbCategoriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbCategoriesMouseClicked
         try {
            showCategory();
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", ex.getMessage());
        }
    }//GEN-LAST:event_tbCategoriesMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbCategoryType;
    private javax.swing.JLabel lbCategoryTypeError;
    private javax.swing.JTable tbCategories;
    private javax.swing.JTextField tfCategoryType;
    // End of variables declaration//GEN-END:variables

    private CategoryTableModel categoryTableModel;

    private CategoryOperations categorySession;

    private Map<JTextComponent, JLabel> fields = new HashMap<>();

    private ModelMapper mapper;

    private Category selectedCategory;

    private void initialize() {
        try {
            initValidation();
            hideErrors();
            initMapper();
            initSession();
            initTable();
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", ex.getMessage());
        }
    }

    private void initValidation() {
        fields.put(tfCategoryType, lbCategoryTypeError);
    }

    private void hideErrors() {
        fields.entrySet().forEach(e -> {
            e.getValue().setVisible(false);
        });
    }

    private void initMapper() {
        mapper = MapperFactory.InitializeMapper();
    }

    private void initSession() {
        categorySession = HibernateSessionFactory.InitializeSession(Operations.CATEGORY);
    }

    private void initTable() throws Exception {
        tbCategories.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbCategories.setAutoCreateRowSorter(true);
        tbCategories.setRowHeight(25);

        /*
        Optional<List<Category>> categories = categorySession.ReadAllEntities();
        
        if (categories.isEmpty()) {
        MessageUtils.showErrorMessage("Empty", "No content present.");
        return;
        }
        */

        categoryTableModel = new CategoryTableModel(categorySession.ReadAllEntities().get());

        tbCategories.setModel(categoryTableModel);
    }

    private void clearForm() {
        selectedCategory = null;
        
        fields.entrySet().forEach(entry -> {
            entry.getKey().setText("");
        });
    }

    private void refreshTable() throws Exception {
        categoryTableModel = new CategoryTableModel(categorySession.ReadAllEntities().get());
        tbCategories.setModel(categoryTableModel);
    }

    private boolean formValid() {
        boolean ok = true;

        for (Map.Entry<JTextComponent, JLabel> entry : fields.entrySet()) {
            ok &= !entry.getKey().getText().trim().isEmpty();
            entry.getValue().setVisible(entry.getKey().getText().trim().isEmpty());
        }

        return ok;
    }

    private void showCategory() throws Exception {
        int selectedRow = tbCategories.getSelectedRow();
        int rowIndex = tbCategories.convertRowIndexToModel(selectedRow);

        int id = (int) categoryTableModel.getValueAt(rowIndex, 0);
        selectedCategory = categorySession.ReadEntityById(id).get();
        fillForm(selectedCategory);
    }

    private void fillForm(Category selectedCategory) {
        tfCategoryType.setText(selectedCategory.getCategoryType());
    }
}
